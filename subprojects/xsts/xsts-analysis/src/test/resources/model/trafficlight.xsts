type Main_region : { __Inactive__, Normal, Interrupted}
type Interrupted : { __Inactive__, Black, BlinkingYellow}
type Normal : { __Inactive__, Green, Red, Yellow}
var LightCommands_displayNone : boolean = false
var LightCommands_displayGreen : boolean = false
var PoliceInterrupt_police : boolean = false
var LightCommands_displayYellow : boolean = false
var LightCommands_displayRed : boolean = false
var Control_toggle : boolean = false
ctrl var main_region : Main_region = __Inactive__
ctrl var interrupted : Interrupted = __Inactive__
ctrl var normal : Normal = __Inactive__
ctrl var BlinkingYellowTimeout3 : integer = 500
ctrl var BlackTimeout4 : integer = 500


trans {
	assume (((!(((main_region == Normal) && (PoliceInterrupt_police == true)))) && (((main_region == Normal) && (normal == Green)) && (Control_toggle == true))) && (normal == Green));
	normal := Yellow;
	LightCommands_displayYellow := true;
} or {
	assume (((!(((main_region == Normal) && (PoliceInterrupt_police == true)))) && (((main_region == Normal) && (normal == Red)) && (Control_toggle == true))) && (normal == Red));
	normal := Green;
	LightCommands_displayGreen := true;
} or {
	assume (((!(((main_region == Normal) && (PoliceInterrupt_police == true)))) && (((main_region == Normal) && (normal == Yellow)) && (Control_toggle == true))) && (normal == Yellow));
	normal := Red;
	LightCommands_displayRed := true;
} or {
	assume (((!(((main_region == Interrupted) && (PoliceInterrupt_police == true)))) && (((main_region == Interrupted) && (interrupted == Black)) && (500 <= BlackTimeout4))) && (interrupted == Black));
	interrupted := BlinkingYellow;
	BlinkingYellowTimeout3 := 0;
	LightCommands_displayYellow := true;
} or {
	assume (((!(((main_region == Interrupted) && (PoliceInterrupt_police == true)))) && (((main_region == Interrupted) && (interrupted == BlinkingYellow)) && (500 <= BlinkingYellowTimeout3))) && (interrupted == BlinkingYellow));
	interrupted := Black;
	BlackTimeout4 := 0;
	LightCommands_displayNone := true;
} or {
	assume ((((main_region == Normal) && (PoliceInterrupt_police == true))) && (main_region == Normal));
	main_region := Interrupted;
	interrupted := BlinkingYellow;
	BlinkingYellowTimeout3 := 0;
	LightCommands_displayYellow := true;
} or {
	assume (((((main_region == Interrupted) && (PoliceInterrupt_police == true))) && (main_region == Interrupted)) && (normal == __Inactive__));
	interrupted := __Inactive__;
	main_region := Normal;
	normal := Red;
	LightCommands_displayRed := true;
} or {
	assume ((((((main_region == Interrupted) && (PoliceInterrupt_police == true))) && (main_region == Interrupted)) && !((normal == __Inactive__))) && (normal == Green));
	interrupted := __Inactive__;
	main_region := Normal;
	LightCommands_displayGreen := true;
} or {
	assume ((((((main_region == Interrupted) && (PoliceInterrupt_police == true))) && (main_region == Interrupted)) && !((normal == __Inactive__))) && (normal == Red));
	interrupted := __Inactive__;
	main_region := Normal;
	LightCommands_displayRed := true;
} or {
	assume ((((((main_region == Interrupted) && (PoliceInterrupt_police == true))) && (main_region == Interrupted)) && !((normal == __Inactive__))) && (normal == Yellow));
	interrupted := __Inactive__;
	main_region := Normal;
	LightCommands_displayYellow := true;
}

init {}

env {
    choice {
        PoliceInterrupt_police := true;
    } or {
        PoliceInterrupt_police := false;
    }
    choice {
        Control_toggle := true;
    } or {
        Control_toggle := false;
    }
    LightCommands_displayNone := false;
    LightCommands_displayYellow := false;
    LightCommands_displayRed := false;
    LightCommands_displayGreen := false;
}

